<?php/** * 供应商销售统计 * User: yagas * Date: 2016/5/24 * Time: 10:08 * * @property integer id           账号ID * @property string  supplierId   供应商编号 * @property integer datetime     日期 * @property string  serial       商品编号 * @property string  total        销售数量 * @property string  price        销售单价 * @property string  subtotal     小计 * @property string  color        颜色 * @property string  singleNumber 单品编码 */class tbSellerSales extends CActiveRecord {    public static function model($className = __CLASS__) {        return parent::model($className);    }    public function tableName() {        return '{{seller_sales}}';    }    public function primaryKey() {        return 'id';    }    public function attributeLabels() {        return [            'supplierId'   => '供应商编号',            'datetime'     => '销售日期',            'serial'       => '商品编号',            'total'        => '销售数量',            'price'        => '商品单价',            'color'        => '颜色',            'singleNumber' => '单品编码'        ];    }    /**     * 数据添加校验     * @return array     */    public function rules() {        return [            ['supplierId,datetime,serial,total,price,singleNumber,color', 'required', 'message'=>'{attribute} need be required'],            ['id', 'safe']        ];    }    /**     * 事件触发器，用于更新产品单日销售量     */    public static function salesLog(CEvent $event) {      if($event->sender instanceof tbOrderProduct) {        $record = tbSellerSales::model()->findByAttributes(['supplierId'=>$event->sender->supplierId, 'serial'=>$event->sender->singleNumber, 'datetime'=>date('Y-m-d')]);        if(is_null($record)) {          $record               = new tbSellerSales;          $record->total        = 0.00;          $record->serial       = $event->sender->serialNumber;          $record->datetime     = date('Y-m-d');          $record->supplierId   = $event->sender->supplierId;          $record->color        = $event->sender->color;          $record->singleNumber = $event->sender->singleNumber;          $record->price        = $event->sender->price;        }        $record->total = bcadd($record->total, $event->sender->num, 2);        $record->subtotal = bcmul($record->total, $record->price);        if(!$record->save()) {          $errors = $record->getErrors();          $errors = array_shift($errors);          Yii::log($errors[0], CLogger::LEVEL_ERROR, 'event::salesLog');          return false;        }        return true;      }      else {        Yii::log("salesLog not found tbOrderProduct", CLogger::LEVEL_ERROR, 'custom_trace');      }    }    public function findAllByrange($serial=null, $start=null, $end=null) {        //SELECT supplierId,`serial`,SUM(`total`) AS `total` FROM `db_seller_sales` WHERE `serial`='k508' and datetime>='' and datetime<='' GROUP BY `serial`        $where = [];        if($serial) {            array_push($where, "serial=':serial'");        }        if($start) {            array_push($where, "datetime>=':start'");        }        if($end) {            array_push($where, "datetime<=':end'");        }        if($where) {            $where = "and ". implode(' and ', $where);        }        else {            $where='';        }        $sql = "SELECT supplierId,`serial`,SUM(`total`) AS `total` FROM `{$this->tableName()}` where 1=1 {$where} GROUP BY `serial` ORDER BY `datetime` ASC";        $db = $this->getDbConnection()->createCommand($sql);        if($serial) {            $db->bindValue(':serial', $serial, PDO::PARAM_STR);        }        if($start) {            $db->bindValue(':start', $start, PDO::PARAM_STR);        }        if($end) {            $db->bindValue(':end', $start, PDO::PARAM_STR);        }        return $db->queryAll();    }}